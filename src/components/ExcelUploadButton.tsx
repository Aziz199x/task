"use client";

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2, Upload } from 'lucide-react';
import { toast } from 'sonner';
import * as XLSX from 'xlsx';
import { useTranslation } from 'react-i18next';
import { useTasks } from '@/context/TaskContext';
import { Task } from '@/types/task';

const ExcelUploadButton: React.FC = () => {
  const { t } = useTranslation();
  const { addTasksBulk } = useTasks();
  const [isOpen, setIsOpen] = useState(false);
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0]);
    } else {
      setFile(null);
    }
  };

  const handleUpload = async () => {
    if (!file) {
      toast.error(t('please_select_an_excel_file'));
      return;
    }

    setLoading(true);
    const reader = new FileReader();

    reader.onload = async (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const json: any[] = XLSX.utils.sheet_to_json(worksheet);

        const newTasks: Partial<Task>[] = json.map((row) => ({
          title: row[t('excel_header_title')] || '', // Title is mandatory
          description: row[t('excel_header_description')],
          location: row[t('excel_header_location')],
          // task_id will be generated by TaskContext, so we ignore it from Excel
          due_date: row[t('excel_header_due_date')] ? new Date(row[t('excel_header_due_date')]).toISOString().split('T')[0] : null,
          assignee_id: row[t('excel_header_assignee_id')],
          type_of_work: row[t('excel_header_type_of_work')] as Task['typeOfWork'],
          equipment_number: row[t('excel_header_equipment_number')] || '', // Equipment number is mandatory
          notification_num: row[t('excel_header_notification_num')] ? String(row[t('excel_header_notification_num')]) : null, // Include notification_num
          status: row[t('excel_header_status')] || 'unassigned',
        }));

        // Filter out tasks that don't have a title or equipment number
        const validTasks = newTasks.filter(task => task.title && task.equipment_number);
        const invalidTaskCount = newTasks.length - validTasks.length;

        if (validTasks.length === 0) {
          toast.error(t('no_valid_tasks_found_in_excel'));
          setLoading(false);
          return;
        }

        await addTasksBulk(validTasks as Task[]);
        toast.success(t('excel_upload_success', { count: validTasks.length }));
        if (invalidTaskCount > 0) {
          toast.warning(t('excel_upload_invalid_tasks_skipped', { count: invalidTaskCount }));
        }
        setIsOpen(false);
        setFile(null);
      } catch (error: any) {
        console.error("Error processing Excel file:", error);
        toast.error(`${t('error_processing_excel_file')}: ${error.message}`);
      } finally {
        setLoading(false);
      }
    };

    reader.onerror = (error) => {
      console.error("Error reading file:", error);
      toast.error(t('error_reading_excel_file'));
      setLoading(false);
    };

    reader.readAsArrayBuffer(file);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button size="sm" variant="outline">
          <Upload className="h-4 w-4 mr-2" /> {t('import_from_excel')}
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{t('upload_excel_file')}</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <p className="text-sm text-muted-foreground">
            {t('excel_upload_instructions')}
          </p>
          <div className="space-y-2">
            <Label htmlFor="excel-file">{t('select_file')}</Label>
            <Input id="excel-file" type="file" accept=".xlsx, .xls" onChange={handleFileChange} />
          </div>
        </div>
        <Button onClick={handleUpload} disabled={loading || !file}>
          {loading ? (
            <Loader2 className="h-4 w-4 animate-spin mr-2" />
          ) : (
            <Upload className="h-4 w-4 mr-2" />
          )}
          {loading ? t('processing') : t('upload')}
        </Button>
      </DialogContent>
    </Dialog>
  );
};

export default ExcelUploadButton;